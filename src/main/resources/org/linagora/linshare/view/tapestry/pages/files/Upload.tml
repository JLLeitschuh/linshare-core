<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<t:MyBorderLayout t:title="message:pages.files.upload.title" t:identifier="upload" t:currentHighlight="files"
xmlns:t="http://tapestry.apache.org/schema/tapestry_5_0_0.xsd">

    <script type="text/template" id="qq-template">
        <div class="qq-uploader-selector qq-uploader">
            <div class="qq-upload-drop-area-selector qq-upload-drop-area">
                <span>${message:pages.files.upload.dragZone}</span>
            </div>
            <div class="qq-upload-button-selector qq-upload-button">
                <div>${message:pages.files.upload.uploadButton}</div>
            </div>
            <span class="qq-drop-processing-selector qq-drop-processing">
                <span>${message:pages.files.upload.dropProcessing}</span>
                <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
            </span>
            <ul class="qq-upload-list-selector qq-upload-list">
                <li>
                    <div class="qq-progress-bar-container-selector">
                        <div class="qq-progress-bar-selector qq-progress-bar"></div>
                    </div>
                    <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                    <span class="qq-edit-filename-icon-selector qq-edit-filename-icon"></span>
                    <span class="qq-upload-file-selector qq-upload-file"></span>
                    <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text"/>
                    <span class="qq-upload-size-selector qq-upload-size"></span>
                    <a class="qq-upload-cancel-selector qq-upload-cancel" href="#">${message:pages.files.upload.cancelButton}</a>
                    <a class="qq-upload-retry-selector qq-upload-retry" href="#">${message:pages.files.upload.retryButton}</a>
                    <a class="qq-upload-delete-selector qq-upload-delete" href="#">${message:pages.files.upload.deleteButton}</a>
                    <span class="qq-upload-status-text-selector qq-upload-status-text"></span>
                </li>
            </ul>
        </div>
    </script>

    <script type="text/javascript" language="javascript">
        var uuids = [];
	
	var uploader;

        var sizeAvailable = ${maxFileSize};

        var updateSizeAvailable = function(callback) {
            jQuery.ajax({
                url: '${contextPath}/webservice/rest/documents/userAvailableSize',
                type: 'GET',
                crossDomain: true,
                dataType: 'json',
                xhrFields: {
                    withCredentials: true
                }
            }).fail(function() {
                console.log("Error when updating available size");
            }).done(function(data) {
                callback(data.value);
            });
        }

        var fixDropzoneInit = function(element) {
            element.attr("qq-hide-dropzone", "true");
            element.hide();
        }

        var rm_errorclass = function() {
            document.getElementById('recipientsPattern').className = 
                document.getElementById('recipientsPattern').className.replace( /(?:^|\s)t-error(?!\S)/ , '' );
        }

        var tryReturn = function() {
            return (jQuery("#progress").val() == 0);
        }

        var startSpinner = function() {
            jQuery(".spinner").show();
            jQuery("#formShareSubmit").hide();
        }

        var trySubmit = function() {
            console.log("Trying to submit");
            if (uuids.length + uploader.getInProgress()) {
                if (jQuery("#is_submit").val() == 1) {
                    startSpinner();
                    if (uploader.getInProgress() == 0) {
                        console.log("Submit sent");
                        jQuery("#submitShare").click();
                    }
                }
            }
        }

        var requestSubmit = function() {
            console.log("Submit requested");
            console.log("DEBUG: " + uuids.length);
            console.log("DEBUG: " + uploader.getInProgress());
            if (uuids.length + uploader.getInProgress() != 0) {
                jQuery("#is_submit").val(1);
                trySubmit();
            }
        }

        jQuery(document).ready(function() {
            // init
            jQuery("#is_submit").val(0);
            jQuery(".spinner").hide();

            var updateCallback = function(value) {
                uploader._options.validation.sizeLimit = value;
                console.log("New validation size is " + value);
            };

            uploader = new qq.FineUploader({
                element: jQuery('#uploader')[0],
                debug: true,
                maxConnections: 1,
                request: {
                    endpoint: "${contextPath}/webservice/fineuploader/upload/receiver"
                },
                /* if one would've wanted to do CORS, put this in the uploader */
                // cors: {
                //     expected: true,
                //     sendCredentials: true
                // },
                callbacks: {
                    onError: function(id, fileName, reason) {
                        qq.log("id: " + id + ", fileName: " + fileName + ", reason: " + reason);
                        jQuery("#error").click();
                    },
                    onDelete: function(id) {
                        // remove item from list of uploaded items to share
                        console.log(name + "delete sucesssful");
                        uuids.splice(uuids.indexOf(uploader.getUuid(id)), 1);

                        // update validation size
                        updateSizeAvailable(updateCallback);
                    },
                    onProgess: function(id) {
                        jQuery("#progress").attr("value", uploader.getInProgress());
                    },
                    onComplete: function(id, name, responseJSON) {
                        console.log(responseJSON);
                        if (responseJSON.success) {
                            console.log(name + "upload sucesssful");
                            uuids.push(uploader.getUuid(id));

                            // update validation size
                            updateSizeAvailable(updateCallback);
                        }
                        jQuery("#progress").attr("value", uploader.getInProgress());
                        if (uploader.getInProgress() == 0) {
                            console.log("All upload are completed: " + uuids.length);
                            jQuery("#uuids").attr("value", uuids.join());
                        }
                        trySubmit();
                    }
                },
                
                failedUploadTextDisplay: {
                    mode: 'custom'
                },
                deleteFile: {
                    enabled: true,
                    forceConfirm: true,
                    confirmMessage: "${message:pages.files.upload.deleteFile.confirmMessage} ",
                    endpoint: "${contextPath}/webservice/fineuploader/upload/receiver"
                },
                messages: {
                    typeError: "${message:pages.files.upload.typeError}",
                    sizeError: "${message:pages.files.upload.sizeError}",
                    minSizeError: "${message:pages.files.upload.minSizeError}",
                    emptyError: "${message:pages.files.upload.emptyError}",
                    noFilesError: "${message:pages.files.upload.noFilesError}",
                    tooManyItemsError: "${message:pages.files.upload.tooManyItemsError}",
                    retryFailTooManyItems: "${message:pages.files.upload.retryFailTooManyItems}",
                    onLeave: "${message:pages.files.upload.onLeave}"
                },
                text: {
                    failUpload: "${message:pages.files.upload.failUpload}",
                    formatProgress: "${message:pages.files.upload.formatProgress}",
                    waitingForResponse: "${message:pages.files.upload.waitingForResponse}"
                },
                validation: {
                    sizeLimit: sizeAvailable
                }
            });

            var it = uploader._controlFailureTextDisplay;
            uploader._controlFailureTextDisplay = function(id, response) {
                // advice before 

                 if (response.error){
                     if (response.error == 'FILE_TOO_LARGE')
                        response.error =  ${errorCatalog}[response.error] + ' ' + '${MyReadablesize}';
                    else
                        response.error = ${errorCatalog}[response.error];
                }
                return it.apply(this, arguments);
            };

            // XXX HACK : css is for losers ;]
            jQuery(".qq-upload-button").attr("class", "btn btn-primary");
            fixDropzoneInit(jQuery(".qq-upload-drop-area"));
        });

    </script>

    <!-- Main content -->
    <div id="content">

		<t:messagePanel />
		<t:businessMessagesDisplayer />

        <h1>${message:pages.files.upload.title}</h1>

        <h2>${message:pages.files.upload.upload.title}</h2>
        <div>
            <ul id="uploader" class="unstyled"></ul>
        </div>

        <h2>${message:pages.files.upload.share.title}</h2>
        <t:form t:id="uploaderForm" class="form-horizontal">
            <fieldset>
                <t:errors />

                <!--upload and share client logic-->
                <t:textfield t:id='uuids' name="uuids" style="display:none" />
                <t:textfield t:id='is_submit' name="is_submit" style="display:none" />
                <t:textfield t:id='progress' name="progress" style="display:none" />

                <div class="control-group">
                    <t:label for="recipientsPattern" class="control-label required">
                    ${message:pages.files.upload.recipients.title}</t:label>
                    <div class="controls">
                        <t:textarea t:id="recipientsPattern" t:value="recipientsSearch" t:mixins="autocomplete"
                        t:minChars="${autocompleteMin}" t:tokens="," class="input-xxlarge"
                        onchange="rm_errorclass();" />
                        <p class="help-block">${message:pages.files.upload.recipients.description}</p>
                    </div>
                </div>
                
                <t:if test="enableListTab">
                    <div class="control-group">
                        <t:label for="mailingLists" class="control-label required">
                        ${message:pages.files.upload.recipientsMailingList.title}</t:label>
                        <div class="controls">
                            <div t:type="tag/tagselect" t:id="mailingLists" t:value="mailingLists"
                            t:encoder="encoder" t:dropdown="false" t:minChars="3" style="width: 535px;"></div>
                            <p class="help-block">${message:pages.files.upload.recipientsMailingList.description}</p>
                        </div>
                    </div>
                </t:if>

                <div class="control-group">
                    <t:if test="showSecureSharingCheckBox">
                        <t:label for="secureSharing" class="control-label">
                        ${message:pages.files.upload.secureSharing}</t:label>
                        <div class="controls">
                            <label class="checkbox">
                                <t:checkbox t:id="secureSharing" />
                                <span class="help-inline">
                                ${message:pages.files.upload.secureSharing.description}</span>
                            </label>
                            <p class="help-block">${message:pages.files.upload.message.secureSharing.help}</p>
                        </div>
                    </t:if>
                </div>

                <div class="control-group">
                    <t:if test="showAcknowledgementCheckBox">
                        <t:label for="creationAcknowledgement" class="control-label">
                        ${message:pages.files.upload.creationAcknowledgement}</t:label>
                        <div class="controls">
                            <label class="checkbox">
                                <t:checkbox t:id="creationAcknowledgement" />
                                <span class="help-inline">
                                ${message:pages.files.upload.creationAcknowledgement.description}</span>
                            </label>
                        </div>
                    </t:if>
                </div>

                <div class="accordion" id="accordionMessage">
                    <div class="accordion-group">
                        <div class="accordion-heading">
                            <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordionMessage"
                            href="#collapseOne">${message:pages.files.upload.message.custom}</a>
                        </div>

                        <div id="collapseOne" class="accordion-body collapse">
                            <div class="accordion-inner">
                                <div class="control-group">
                                    <div class="controls">
                                        <p class="help-block">${message:pages.files.upload.message.description}</p>
                                    </div>
                                </div>

                                <div class="control-group">
                                    <t:label for="textAreaSubjectValue" class="control-label">
                                    ${message:pages.files.upload.subject.title}</t:label>
                                    <div class="controls">
                                        <t:textfield t:id="textAreaSubjectValue" size="100" class="input-xxlarge"
                                        onkeypress="if (event.keyCode == 13) return false;" />
                                    </div>
                                </div>

                                <div class="control-group">
                                    <t:label for="textAreaValue" class="control-label">
                                    ${message:pages.files.upload.message.title}</t:label>
                                    <div class="controls">
                                        <t:textarea rows="8" t:id="textAreaValue" class="input-xxlarge" />
                                    </div> <!--controls-->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-actions" style="background-color: transparent">
                    <t:pageLink page="files" class="btn" onlick="tryReturn()">
                    ${message:pages.files.upload.cancelButton}</t:pageLink>
                    ${message:global.space}
                    <input name="submitShare" id="submitShare" type="submit" style="display:none" />
                    <a id="formShareSubmit" class="btn btn-primary" onclick="requestSubmit()">
                        <span><img src="${asset:context:images/icons/share-on-small.png}"
                        alt="" /> ${message:global.button.share.cap}</span>
                    </a>
                    <div class="spinner"></div>
                </div> <!--form-actions-->

            </fieldset>
        </t:form>

    </div>
</t:MyBorderLayout>
